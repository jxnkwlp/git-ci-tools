stages:
  - version
  - release

get-version:
  stage: version
  image: mcr.microsoft.com/dotnet/sdk:5.0-alpine3.12
  before_script:
    - export PATH="$PATH:/root/.dotnet/tools"
  rules:
    - if: $CI_COMMIT_TAG
      when: never # Do not run this job when a tag is created manually
  script:
    # - dotnet tool install -g Passingwind.Git-CI-Tools --version 0.1.0-pre1
    # - gitci version current
    # - gitci version next -o variables.env --format dotenv  --include-prerelease --prerelease="dev" --build=$CI_COMMIT_SHA
    - cd Git-CI-Tools
    - dotnet restore
    - dotnet run -- version current
    - dotnet run -- version next --branch 'origin/feature/gitlab' -o $CI_PROJECT_DIR/variables.env --format dotenv  --include-prerelease --prerelease="dev" --build=$CI_COMMIT_SHORT_SHA  --debug-mode
    - dotnet run -- release notes --branch 'origin/feature/gitlab' -o $CI_PROJECT_DIR/CHANGELOG.md  --include-prerelease=false
    - ls $CI_PROJECT_DIR
  artifacts:
    paths:
      - CHANGELOG.md
    reports:
      dotenv: variables.env

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: get-version
      artifacts: true
  # rules:
  #   - if: $CI_COMMIT_TAG
  #     when: never # Do not run this job when a tag is created manually
  #   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when commits are pushed or merged to the default branch
  script:
    - echo 'running release_job for $nextVersion'
  release:
    tag_name: "v$nextVersion"
    description: CHANGELOG.md
    ref: "$CI_COMMIT_SHA"
    name: "Release $nextVersion"
